from AzureAgent.langgraph_app import app as langgraph_app_instance
from a2a.server.agent_execution import AgentExecutor, RequestContext
from a2a.server.events.event_queue import EventQueue
from a2a.types import (
    TaskArtifactUpdateEvent,
    TaskState,
    TaskStatus,
    TaskStatusUpdateEvent,
)
from a2a.utils import new_agent_text_message, new_task, new_text_artifact


class LangGraphAgentExecutor(AgentExecutor):
    """
    AgentExecutor for the LangGraph-based Dispute Email Agent.
    It invokes the langgraph_app_instance to process user requests.
    """

    def __init__(self):
        self.agent_invoker = langgraph_app_instance
        if not hasattr(self.agent_invoker, 'invoke') and not hasattr(self.agent_invoker, 'ainvoke'):
            raise TypeError("agent_invoker must have a callable 'invoke' or 'ainvoke' method")

    async def execute(
        self,
        context: RequestContext,
        event_queue: EventQueue,
    ) -> None:
        query = context.get_user_input()
        task = context.current_task

        if not context.message:
            print("Error: No message provided in the request context.")
            if task:
                event_queue.enqueue_event(
                    TaskStatusUpdateEvent(
                        status=TaskStatus(state=TaskState.failed, message=new_agent_text_message("Error: No input message received.", task.contextId, task.id)),
                        final=True,
                        contextId=task.contextId,
                        taskId=task.id,
                    )
                )
            return

        if not task:
            task = new_task(context.message)
            event_queue.enqueue_event(task)

        print(f"Executing task {task.id} for query: \"{query}...\"")

        event_queue.enqueue_event(
            TaskStatusUpdateEvent(
                status=TaskStatus(
                    state=TaskState.working,
                    message=new_agent_text_message("Processing your request...", task.contextId, task.id),
                ),
                final=False,
                contextId=task.contextId,
                taskId=task.id,
            )
        )

        try:
            agent_input_state = {"input": query}
            
            if hasattr(self.agent_invoker, 'ainvoke'):
                agent_result_state = await self.agent_invoker.ainvoke(agent_input_state)
            elif hasattr(self.agent_invoker, 'invoke'):
                agent_result_state = self.agent_invoker.invoke(agent_input_state)
            else:
                raise NotImplementedError("Agent invoker has neither 'ainvoke' nor 'invoke' method.")
            agent_output_text = agent_result_state.get("agent_output")

            if agent_output_text is None:
                print(f"Error: Agent did not produce 'agent_output' for task {task.id}. Result: {agent_result_state}")
                raise ValueError("Agent response format error: 'agent_output' missing.")

            event_queue.enqueue_event(
                TaskArtifactUpdateEvent(
                    append=False,
                    contextId=task.contextId,
                    taskId=task.id,
                    lastChunk=True,
                    artifact=new_text_artifact(
                        name='agent_response',
                        description='Response generated by the agent.',
                        text=str(agent_output_text),
                    ),
                )
            )

            event_queue.enqueue_event(
                TaskStatusUpdateEvent(
                    status=TaskStatus(state=TaskState.completed),
                    final=True,
                    contextId=task.contextId,
                    taskId=task.id,
                )
            )
            print(f"Task {task.id} completed successfully.")

        except Exception as e:
            print(f"Error during agent execution for task {task.id}: {str(e)}")
            error_message = f"An error occurred while processing your request: {str(e)}"
            event_queue.enqueue_event(
                TaskStatusUpdateEvent(
                    status=TaskStatus(
                        state=TaskState.failed,
                        message=new_agent_text_message(error_message, task.contextId, task.id),
                    ),
                    final=True,
                    contextId=task.contextId,
                    taskId=task.id,
                )
            )

    async def cancel(
        self, context: RequestContext, event_queue: EventQueue
    ) -> None:
        task_id = context.current_task.id if context.current_task else "unknown"
        print(f"Cancellation requested for task {task_id}, but not supported by this agent.")
        raise NotImplementedError("Task cancellation is not supported by this agent.")